alias functionNum R1;
alias currentPID R2;
alias swapPID R3;
alias counter R4;
alias page R5;
alias block R6;

if(functionNum == 1) then         //Swap Out
  alias p1 R10;
  alias p2 R11;
  alias state R12;
  alias mode R13;
  p1 = 0;
  p2 = -1;
  swapPID = 3;
  while(swapPID < 14) do
    state = [PROCESS_TABLE + swapPID*16 + 4];
    mode = [PROCESS_TABLE + swapPID*16 + 9];

    if([PROCESS_TABLE + swapPID*16 + 6] == 1 || state == TERMINATED || state == ALLOCATED
        || swapPID == [SYSTEM_STATUS_TABLE + 6] || mode == INT_EXEC || mode == INT_EXIT) then
      swapPID = swapPID + 1;
      continue;
    endif;

    if(state == WAIT_PROCESS) then
      break;
    else
      if(p1 == 0 && state == WAIT_SEMAPHORE) then
        p1 = swapPID;
      else
        if(state != RUNNING) then
          if(p2 == -1) then
            p2 = swapPID;
          endif;
          if([PROCESS_TABLE + swapPID*16] > [PROCESS_TABLE + p2*16]) then
            p2 = swapPID;
          endif;
        endif;
      endif;
    endif;

    swapPID = swapPID + 1;
  endwhile;

  if(swapPID == 14) then
    if(p1 != 0) then
      swapPID = p1;
    else
      if(p2 != -1) then
        swapPID = p2;
      else
        [SYSTEM_STATUS_TABLE + 5] = 0;
        return;
      endif;
    endif;
  endif;

  [PROCESS_TABLE + swapPID*16] = 0;

  counter = 2;
  while(counter < 10) do
    page = PAGE_TABLE_BASE + swapPID*20 + 2*counter;

    if(counter >= 2 && counter < 4 && ([page] == -1 || [MEMORY_FREE_LIST + [page]] > 1)) then
      counter = counter + 1;
      continue;
    endif;

    if(counter < 4 || counter >= 8) then
      multipush(R1, R2, R3, R4, R5);
      R1 = 6;
      call MOD_2;
      block = R0;
      multipop(R1, R2, R3, R4, R5);

      [DISK_MAP_TABLE + swapPID*10 + counter%10] = block;

      backup;
      R1 = 1;
      R2 = currentPID;
      R3 = [page];
      R4 = block;
      call MOD_4;
      restore;
    endif;

    if([page] != -1) then
      backup;
      R1 = 2;
      R2 = [page];
      call MOD_2;
      restore;

      [page] = -1;
      [page + 1] = "0000";
    endif;
    counter = counter + 1;
  endwhile;

  [PROCESS_TABLE + swapPID*16 + 6] = 1;
  [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;
  [SYSTEM_STATUS_TABLE + 5] = 0;
endif;

if(functionNum == 2) then         //Swap In
  alias p1 R10;
  p1 = -1;
  swapPID = 3;
  while(swapPID < 14) do
    if([PROCESS_TABLE + swapPID*16 + 4] == READY && [PROCESS_TABLE + swapPID*16 + 6] == 1) then
      if(p1 == -1) then
        p1 = swapPID;
      endif;
      if([PROCESS_TABLE + swapPID*16] > [PROCESS_TABLE + p1*16]) then
        p1 = swapPID;
      endif;
    endif;
    swapPID = swapPID + 1;
  endwhile;

  swapPID = p1;
  if(swapPID == -1) then
    [SYSTEM_STATUS_TABLE + 5] = 0;
    return;
  endif;

  [PROCESS_TABLE + swapPID*16] = 0;

  counter = 2;
  while(counter < 10) do
    if(counter >= 4 && counter < 8) then
      counter = counter + 1;
      continue;
    endif;

    if(counter >= 2 && counter < 4 && [DISK_MAP_TABLE + swapPID*10 + counter] == -1) then
      counter = counter + 1;
      continue;
    endif;

    multipush(R1, R2, R3, R4);
    R1 = 1;
    call MOD_2;
    page = R0;
    multipop(R1, R2, R3, R4);

    backup;
    R4 = [DISK_MAP_TABLE + swapPID*10 + counter];
    R1 = 2;
    R2 = currentPID;
    R3 = page;
    call MOD_4;
    restore;

    backup;
    R5 = R2;
    R1 = 4;
    R2 = [DISK_MAP_TABLE + swapPID*10 + counter];
    R3 = R5;
    call MOD_2;
    restore;

    [DISK_MAP_TABLE + swapPID*10 + counter] = -1;

    [PAGE_TABLE_BASE + swapPID*20 + 2*counter] = page;
    [PAGE_TABLE_BASE + swapPID*20 + 2*counter + 1] = "0110";
    counter = counter + 1;
  endwhile;

  [PROCESS_TABLE + swapPID*16 + 6] = 0;
  [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
  [SYSTEM_STATUS_TABLE + 5] = 0;
endif;

return;
