alias functionNum R1;
alias currentPID R2;

if(functionNum == 1) then         //Disk Store
  multipush(R1, R2, R3, R4);
  R1 = 3;
  R2 = currentPID;
  call MOD_0;
  multipop(R1, R2, R3, R4);

  [DISK_STATUS_TABLE + 1] = 1;
  [DISK_STATUS_TABLE + 2] = R3;
  [DISK_STATUS_TABLE + 3] = R4;

  store(R3, R4);

  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

  multipush(R1, R2, R3, R4);
  call MOD_5;
  multipop(R1, R2, R3, R4);
endif;

if(functionNum == 2) then         //Disk Load
  multipush(R1, R2, R3, R4);
  R1 = 3;
  R2 = currentPID;
  call MOD_0;
  multipop(R1, R2, R3, R4);

  [DISK_STATUS_TABLE + 1] = 0;
  [DISK_STATUS_TABLE + 2] = R3;
  [DISK_STATUS_TABLE + 3] = R4;

  load(R3, R4);

  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

  multipush(R1, R2, R3, R4);
  call MOD_5;
  multipop(R1, R2, R3, R4);
endif;

if(functionNum == 3) then         //Terminal Write
  multipush(R1, R2, R3);
  R1 = 8;
  R2 = currentPID;
  call MOD_0;
  multipop(R1, R2, R3);

  print R3;

  multipush(R1, R2, R3);
  R1 = 9;
  R2 = currentPID;
  call MOD_0;
  multipop(R1, R2, R3);
endif;

if(functionNum == 4) then         //Terminal Read
  multipush(R1, R2, R3);
  R1 = 8;
  R2 = currentPID;
  call MOD_0;
  multipop(R1, R2, R3);

  read;
  [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;

  multipush(R1, R2, R3);
  call MOD_5;
  multipop(R1, R2, R3);

  alias word R4;
  word = [PTBR + 2*(R3/512)]*512 + R3%512;
  [word] = [PROCESS_TABLE + currentPID*16 + 8];
endif;

return;
