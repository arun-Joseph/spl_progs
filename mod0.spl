alias functionNum R1;
alias currentPID R2;

if(functionNum == 1) then         //Acquire Buffer
  while([BUFFER_TABLE + R2*4 + 2] != -1) do
    [PROCESS_TABLE + R3*16 + 4] = WAIT_BUFFER;
    [PROCESS_TABLE + R3*16 + 5] = R2;
    multipush(R1, R2, R3);
    call MOD_5;
    multipop(R1, R2, R3);
  endwhile;

  [BUFFER_TABLE + R2*4 + 2] = R3;
endif;

if(functionNum == 2) then         //Release Buffer
  if([BUFFER_TABLE + R2*4 + 2] != R3) then
    R0 = -1;
    return;
  endif;

  [BUFFER_TABLE + R2*4 + 2] = -1;

  alias counter R5;
  counter = 0;
  while(counter < 16) do
    if([PROCESS_TABLE + counter*16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter*16 + 5] == R2) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
      [PROCESS_TABLE + counter*16 + 5] = "";
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

if(functionNum == 3) then         //Acquire Disk
  while([DISK_STATUS_TABLE] == 1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    multipush(R1, R2);
    call MOD_5;
    multipop(R1, R2);
  endwhile;

  [DISK_STATUS_TABLE] = 1;
  [DISK_STATUS_TABLE + 4] = currentPID;
endif;

if(functionNum == 4) then         //Acquire Inode
  while([FILE_STATUS_TABLE + R2*4] != -1) do
    [PROCESS_TABLE + R3*16 + 4] = WAIT_FILE;
    [PROCESS_TABLE + R3*16 + 5] = R2;
    multipush(R1, R2, R3);
    call MOD_5;
    multipop(R1, R2, R3);
  endwhile;

  if([INODE_TABLE + R2*16 + 1] == -1) then
    R0 = -1;
    return;
  endif;

  [FILE_STATUS_TABLE + R2*4] = R3;
  R0 = 0;
endif;

if(functionNum == 5) then         //Release Inode
  if([FILE_STATUS_TABLE + R2*4] != R3) then
    R0 = -1;
    return;
  endif;

  [FILE_STATUS_TABLE + R2*4] = -1;

  alias counter R5;
  counter = 0;
  while(counter < 16) do
    if([PROCESS_TABLE + counter*16 + 4] == WAIT_FILE && [PROCESS_TABLE + counter*16 + 5] == R2) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
      [PROCESS_TABLE + counter*16 + 5] = "";
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

if(functionNum == 6) then         //Acquire Semaphore
  alias counter R5;
  counter = 0;
  while(counter < 32) do
    if([SEMAPHORE_TABLE + counter*4 + 1] == 0) then
      [SEMAPHORE_TABLE + counter*4] = -1;
      [SEMAPHORE_TABLE + counter*4 + 1] = 1;
      R0 = counter;
      break;
    endif;
    counter = counter + 1;
  endwhile;

  if(counter == 32) then
    R0 = -1;
    return;
  endif;
endif;

if(functionNum == 7) then         //Release Semaphore
  if([SEMAPHORE_TABLE + R2*4] == R3) then
    [SEMAPHORE_TABLE + R2*4] = -1;
    alias counter R5;
    counter = 0;
    while(counter < 16) do
      if([PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter*16 + 5] == R2) then
        [PROCESS_TABLE + counter*16 + 4] = READY;
        [PROCESS_TABLE + counter*16 + 5] = "";
      endif;
      counter = counter + 1;
    endwhile;
  endif;

  [SEMAPHORE_TABLE + R2*4 + 1] = [SEMAPHORE_TABLE + R2*4 + 1] - 1;
endif;

if(functionNum == 8) then         //Acquire Terminal
  while([TERMINAL_STATUS_TABLE] == 1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
    multipush(R1, R2);
    call MOD_5;
    multipop(R1, R2);
  endwhile;

  [TERMINAL_STATUS_TABLE] = 1;
  [TERMINAL_STATUS_TABLE + 1] = currentPID;
endif;

if(functionNum == 9) then         //Release Terminal
  if([TERMINAL_STATUS_TABLE + 1] != currentPID) then
    R0 = -1;
    return;
  endif;

  [TERMINAL_STATUS_TABLE] = 0;

  alias counter R3;
  counter = 0;
  while(counter < 16) do
    if([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

return;
