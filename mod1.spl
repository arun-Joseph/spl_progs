alias functionNum R1;

if(functionNum == 1) then         //Get Pcb Entry
  alias newPID R3;
  newPID = 0;
  while(newPID < 16) do
    if([PROCESS_TABLE + newPID*16 + 4] == TERMINATED) then
      R0 = newPID;
      [PROCESS_TABLE + newPID*16 + 1] = newPID;
      [PROCESS_TABLE + newPID*16 + 4] = ALLOCATED;
      [PROCESS_TABLE + newPID*16 + 14] = PAGE_TABLE_BASE + newPID*20;
      [PROCESS_TABLE + newPID*16 + 15] = 10;
      break;
    endif;
    newPID = newPID + 1;
  endwhile;

  if(newPID == 16) then
    R0 = -1;
  endif;
endif;

if(functionNum == 2) then         //Free User Area Page
  alias userAreaPageNum R4;
  userAreaPageNum = [PROCESS_TABLE + R2*16 + 11];

  alias counter R5;
  counter = 496;
  while(counter < 512) do
    if([userAreaPageNum*512 + counter] == FILE) then
      multipush(R1, R2, R4, R5);
      R1 = 4;
      R2 = [userAreaPageNum*512 + counter + 1];
      call MOD_3;
      multipop(R1, R2, R4, R5);
    endif;

    if([userAreaPageNum*512 + counter] == SEMAPHORE) then
      multipush(R1, R2, R4, R5);
      R1 = 7;
      R3 = R2;
      R2 = [userAreaPageNum*512 + counter + 1];
      call MOD_0;
      multipop(R1, R2, R4, R5);
    endif;

    counter = counter + 2;
  endwhile;

  multipush(R1, R2, R4, R5);
  R1 = 2;
  R2 = userAreaPageNum;
  call MOD_2;
  multipop(R1, R2, R4, R5);
endif;

if(functionNum == 3) then         //Exit Process
  if([PROCESS_TABLE + R2*16 + 9] != 9) then
    alias counter R3;
    counter = 0;
    while(counter < 16) do
      if([PROCESS_TABLE + counter*16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + counter*16 + 5] == R2) then
        [PROCESS_TABLE + counter*16 + 4] = READY;
      endif;

      if([PROCESS_TABLE + counter*16 + 2] == R2) then
        [PROCESS_TABLE + counter*16 + 2] = -1;
      endif;

      counter = counter + 1;
    endwhile;
  endif;

  multipush(R1, R2);
  R1 = 4;
  call MOD_1;
  multipop(R1, R2);

  multipush(R1, R2);
  R1 = 2;
  call MOD_1;
  multipop(R1, R2);

  [PROCESS_TABLE + R2*16 + 4] = TERMINATED;
endif;

if(functionNum == 4) then         //Free Page Table
  [PAGE_TABLE_BASE + 20*R2] = -1;
  [PAGE_TABLE_BASE + 20*R2 + 1] = "0000";
  [PAGE_TABLE_BASE + 20*R2 + 2] = -1;
  [PAGE_TABLE_BASE + 20*R2 + 3] = "0000";

  alias counter R3;
  counter = 4;
  while(counter < 20) do
    if([PAGE_TABLE_BASE + 20*R2 + counter] == -1) then
      counter = counter + 2;
      continue;
    endif;

    multipush(R1, R2, R3);
    R1 = 2;
    R2 = [PAGE_TABLE_BASE + 20*R2 + counter];
    call MOD_2;
    multipop(R1, R2, R3);

    [PAGE_TABLE_BASE + 20*R2 + counter] = -1;
    [PAGE_TABLE_BASE + 20*R2 + counter + 1] = "0000";

    counter = counter + 2;
  endwhile;

  alias currentPID R4;
  counter = 2;
  while(counter < 10) do
    if([DISK_MAP_TABLE + R2*10 + counter] == -1) then
      counter = counter + 1;
      if(counter == 4) then
        counter = 8;
      endif;
      continue;
    endif;

    currentPID = R2;
    multipush(R1, R2, R3);
    R1 = 4;
    R2 = [DISK_MAP_TABLE + currentPID*10 + counter];
    R3 = currentPID;
    call MOD_2;
    multipop(R1, R2, R3);
    [DISK_MAP_TABLE + R2*10 + counter] = -1;

    counter = counter + 1;
    if(counter == 4) then
      counter = 8;
    endif;
  endwhile;

  counter = 4;
  while(counter < 8) do
    [DISK_MAP_TABLE + R2*10 + counter] = -1;
    counter = counter + 1;
  endwhile;
endif;

if(functionNum == 5) then         //Kill All
  alias counter R5;
  counter = 0;
  while(counter < 60) do
    if([INODE_TABLE + counter*16 + 1] != -1) then
      multipush(R1, R2, R5);
      R1 = 4;
      R3 = R2;
      R2 = counter;
      call MOD_0;
      multipop(R1, R2, R5);
    endif;
    counter = counter + 1;
  endwhile;

  multipush(R1, R2);
  R1 = 3;
  call MOD_0;
  multipop(R1, R2);

  multipush(R1, R2);
  R1 = 8;
  call MOD_0;
  multipop(R1, R2);

  counter = 2;
  while(counter < 15) do
    if(counter != R2 && [PROCESS_TABLE + counter*16 + 4] != TERMINATED) then
      multipush(R1, R2, R5);
      R1 = 3;
      R2 = counter;
      call MOD_1;
      multipop(R1, R2, R5);
    endif;
    counter = counter + 1;
  endwhile;

  multipush(R1, R2);
  R1 = 9;
  call MOD_0;
  multipop(R1, R2);

  [DISK_STATUS_TABLE] = 0;

  counter = 0;
  while(counter < 60) do
    if([INODE_TABLE + counter*16 + 1] != -1) then
      multipush(R1, R2, R5);
      R1 = 5;
      R3 = R2;
      R2 = counter;
      call MOD_0;
      multipop(R1, R2, R5);
    endif;
    counter = counter + 1;
  endwhile;
endif;

return;
